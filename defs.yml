toplevel: '@vendetta'

decls: |
  type PropIntellisense<P extends string | symbol> = Record<P, any> & Record<PropertyKey, any>;
  type PropsFinder = <T extends string | symbol>(...props: T[]) => PropIntellisense<T>;
  type PropsFinderAll = <T extends string | symbol>(...props: T[]) => PropIntellisense<T>[];

  type SearchFilter = (tree: any) => boolean;
  interface FindInTreeOptions {
    walkable?: string[];
    ignore?: string[];
    maxDepth?: number;
  }

  type Indexable<Type> = { [index: string]: Type }

  interface Asset {
    name: string;
    id: number;
  }

  interface PluginAuthor {
    name: string;
    id: string;
  }

  interface PluginManifest {
    name: string;
    description: string;
    authors: PluginAuthor[];
    main: string;
    hash: string;
    vendetta?: {
      icon?: string;
    };
  }

  interface Plugin {
    id: string;
    manifest: PluginManifest;
    enabled: boolean;
    update: boolean;
    js: string;
  }

  interface ApplicationCommand {
    description: string;
    name: string;
    options: ApplicationCommandOption[];
    execute: (args: any[], ctx: CommandContext) => CommandResult | void | Promise<CommandResult> | Promise<void>;
    id?: string;
    applicationId: string;
    displayName: string;
    displayDescription: string;
    inputType: ApplicationCommandInputType;
    type: ApplicationCommandType;
  }

  declare enum ApplicationCommandInputType {
    BUILT_IN,
    BUILT_IN_TEXT,
    BUILT_IN_INTEGRATION,
    BOT,
    PLACEHOLDER,
  }

  interface ApplicationCommandOption {
    name: string;
    description: string;
    required?: boolean;
    type: ApplicationCommandOptionType;
    displayName: string;
    displayDescription: string;
  }

  declare enum ApplicationCommandOptionType {
    SUB_COMMAND = 1,
    SUB_COMMAND_GROUP,
    STRING,
    INTEGER,
    BOOLEAN,
    USER,
    CHANNEL,
    ROLE,
    MENTIONABLE,
    NUMBER,
    ATTACHMENT,
  }

  declare enum ApplicationCommandType {
    CHAT = 1,
    USER,
    MESSAGE,
  }

  interface CommandContext {
    channel: any;
    guild: any;
  }

  interface CommandResult {
    content: string;
    tts?: boolean;
  }

  interface Settings {
    debuggerUrl: string;
    developerSettings: boolean;
  }

  type LoggerFunction = (...messages: any[]) => void;
  interface Logger {
    log: LoggerFunction;
    info: LoggerFunction;
    warn: LoggerFunction;
    error: LoggerFunction;
    time: LoggerFunction;
    trace: LoggerFunction;
    verbose: LoggerFunction;
  }

  type EmitterEvent = "GET" | "SET" | "DEL";

  interface EmitterListenerData {
    path: string[];
    value?: any;
  }

  type EmitterListener = (
    event: EmitterEvent,
    data: EmitterListenerData | any
  ) => any;

  type EmitterListeners = Indexable<Set<EmitterListener>>;

  interface Emitter {
      listeners: EmitterListeners;
      on: (event: EmitterEvent, listener: EmitterListener) => void;
      off: (event: EmitterEvent, listener: EmitterListener) => void;
      once: (event: EmitterEvent, listener: EmitterListener) => void;
      emit: (event: EmitterEvent, data: EmitterListenerData) => void;
  }

defs:
  - patcher:
    - [import, spitroast]
    - [const, 'before: typeof _spitroast.before']
    - [const, 'after: typeof _spitroast.after']
    - [const, 'instead: typeof _spitroast.instead']
    - [const, 'unpatchAll: typeof _spitroast.unpatchAll']

  - metro:
    - [const, 'findByProps: PropsFinder']
    - [const, 'findByPropsAll: PropsFinderAll']
    - [function, 'findByDisplayName(name: string, defaultExp: boolean): any']
    - [function, 'findByDisplayNameAll(name: string, defaultExp: boolean): any[]']

    - common:
      - [import, react]
      - [import, react-native]
      - [const, 'constants: PropIntellisense<"API_HOST">']
      - [const, 'channels: PropIntellisense<"getVoiceChannelId">']
      - [const, 'i18n: PropIntellisense<"Messages">']
      - [const, 'url: PropIntellisense<"openURL">']
      - [const, 'toasts: PropIntellisense<"open" | "close">']
      - [const, 'React: typeof _react']
      - [const, 'ReactNative: typeof _react_native']

  - constants:
    - [const, 'DISCORD_SERVER: string']
    - [const, 'GITHUB: string']
  
  - utils:
    - [function, 'copyText(content: string): void']
    - [function, 'findInReactTree(tree: { [key: string]: any }, filter: SearchFilter): void']
    - [function, 'findInTree(tree: { [key: string]: any }, filter: SearchFilter, options: FindInTreeOptions): any']
  
  - debug:
    - [function, 'connectToDebugger(url: string): void']
  
  - ui:
    - components:
      - [const, 'Forms: PropIntellisense<"Form" | "FormSection">']
      - [const, 'General: PropIntellisense<"Button" | "Text" | "View">']
    
    - toasts:
      - [function, 'showToast(content: string, asset: number): void']
    
    - assets:
      - [const, 'all: Indexable<Asset>']
      - [function, 'find(filter: (a: any) => void): Asset | null | undefined']
      - [function, 'getAssetByName(name: string): Asset']
      - [function, 'getAssetByID(id: number): Asset']
      - [function, 'getAssetIDByName(name: string): number']

  - plugins:
    - [const, 'plugins: Indexable<Plugin>']
    - [function, 'fetchPlugin(id: string, enabled: boolean): void']
    - [function, 'evalPlugin(plugin: Plugin): void']
    - [function, 'stopPlugin(id: string): void']
    - [function, 'removePlugin(id: string): void']
    - [function, 'getSettings(id: string): JSX.Element']

  - commands:
    - [function, 'registerCommand(command: ApplicationCommand): () => void']

  - storage:
    - [function, 'createProxy<T>(target: T): { proxy: T, emitter: Emitter }']
    - [function, 'useProxy<T>(storage: T): T']
    - [function, 'createStorage<T>(storeName: string): Promise<Awaited<T>>']
    - [function, 'wrapSync<T extends Promise<any>>(store: T): Awaited<T>']
  
  - [const, 'settings: Settings']
  - [const, 'logger: Logger']
  - [const, 'version: string']
